{"version":3,"file":"static/js/577.6117eba1.chunk.js","mappings":"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","sources":["Fetch.jsx","webpack://react-homework-template/./src/components/movieItem/MovieItem.module.css?7af4","components/movieItem/MovieItem.jsx","webpack://react-homework-template/./src/pages/movies/Movies.module.css?c186","pages/movies/Movies.jsx"],"sourcesContent":["import axios from \"axios\";\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\nconst KEY = 'b889b1f15800992b1379ee4939d9484c';\n\nexport const getTrendingMovies = async () => {\n  const query = `trending/movie/day?api_key=${KEY}`;\n  const { data: movies } = await axios.get(query);\n  return movies;\n};\n\nexport const searchMovies = async searchParam => {\n  const query = `search/movie?api_key=${KEY}&page=1&query=${searchParam}`;\n  const { data: movies } = await axios.get(query);\n  return movies;\n};\n\nexport const getMovieDetails = async movieId => {\n  const query = `movie/${movieId}$?api_key=${KEY}`;\n  const { data: movie } = await axios.get(query);\n  return movie;\n};\n\nexport const getMovieCast = async movieId => {\n  const query = `movie/${movieId}/credits?api_key=${KEY}`;\n  const { data } = await axios.get(query);\n  return data;\n};\n\nexport const getReviews = async movieId => {\n  const query = `movie/${movieId}/reviews?api_key=${KEY}`;\n  const { data } = await axios.get(query);\n  return data;\n};\n\n\n","// extracted by mini-css-extract-plugin\nexport default {\"list\":\"MovieItem_list__MeWSv\",\"link\":\"MovieItem_link__cm55f\",\"img\":\"MovieItem_img__2wMcO\",\"movieName\":\"MovieItem_movieName__m9q6q\"};","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport noImg from '..//..//images/No_image.jpg';\nimport css from './MovieItem.module.css';\n\nconst MovieItem = ({ id, title, poster_path, location }) => {\n  return (\n    <li className={css.list} key={id} id={id}>\n      <Link\n        className={css.link}\n        to={{\n          pathname: `/movies/${id}`,\n          state: {\n            from: {\n              location,\n            },\n          },\n        }}\n      >\n        <img\n          className={css.img}\n          src={\n            poster_path\n              ? `https://image.tmdb.org/t/p/w500${poster_path}`\n              : noImg\n          }\n          alt=\"poster\"\n          width=\"\"\n          height=\"\"\n        />\n        <p className={css.movieName}>{title}</p>\n      </Link>\n    </li>\n  );\n};\n\nexport default MovieItem;\n","// extracted by mini-css-extract-plugin\nexport default {\"moviesTitle\":\"Movies_moviesTitle__UGoZf\",\"searchForm\":\"Movies_searchForm__RjJqH\",\"searchInput\":\"Movies_searchInput__mxayf\",\"searchButton\":\"Movies_searchButton__cozX1\",\"link\":\"Movies_link__XMa7X\",\"moviesList\":\"Movies_moviesList__xFw9Z\",\"list\":\"Movies_list__nhUXd\",\"img\":\"Movies_img__kWorT\",\"movieName\":\"Movies_movieName__8e4or\"};","import React, { useState, useEffect } from 'react';\nimport { useSearchParams, useNavigate } from 'react-router-dom';\nimport { searchMovies } from '../../Fetch.jsx';\nimport noImg from '..//..//images/No_image.jpg';\nimport MovieItem from 'components/movieItem/MovieItem';\nimport css from './Movies.module.css';\n\nconst Movies = () => {\n  const [searchMovie, setSearchMovie] = useState('');\n  const [movies, setMovies] = useState([]);\n\n  const [searchParams] = useSearchParams();\n  const history = useNavigate();\n\n  useEffect(() => {\n    const searchString = searchParams.get('query');\n\n    if (searchString) {\n      const getMovies = async () => {\n        const { results } = await searchMovies(searchString);\n\n        setMovies(results);\n        setSearchMovie(searchString);\n      };\n\n      getMovies();\n    }\n  }, [searchParams]);\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n\n    if (searchMovie.trim()) {\n      const { results } = await searchMovies(searchMovie);\n\n      setMovies(results);\n      setSearchMovie('');\n\n      if (results.length === 0) {\n        window.alert('We do not have such movie');\n      }\n\n      history({\n        search: `query=${searchMovie}`,\n      });\n    }\n  };\n\n  return (\n    <>\n      <header>\n        <form className={css.searchForm} onSubmit={handleSubmit}>\n          <input\n            onChange={e => setSearchMovie(e.target.value)}\n            type=\"text\"\n            autoComplete=\"off\"\n            autoFocus\n            placeholder=\"Search movie\"\n            value={searchMovie}\n            className={css.searchInput}\n          />\n          <button className={css.searchButton} type=\"submit\">\n            &#128269;\n          </button>\n        </form>\n      </header>\n      <ul className={css.moviesList}>\n        {movies.length > 0 &&\n          movies.map(({ id, title, poster_path }) => (\n            <MovieItem\n              key={id}\n              id={id}\n              title={title}\n              posterPath={\n                poster_path\n                  ? `https://image.tmdb.org/t/p/w500${poster_path}`\n                  : noImg\n              }\n              searchParams={searchParams}\n            />\n          ))}\n      </ul>\n    </>\n  );\n};\n\nexport default Movies;\n\n// import React, { useState, useEffect } from 'react';\n// import { useLocation, useNavigate } from 'react-router-dom';\n// import { searchMovies } from '../../Fetch.jsx';\n// import noImg from '..//..//images/No_image.jpg';\n// import MovieItem from 'components/movieItem/MovieItem';\n// import css from './Movies.module.css';\n\n// const Movies = () => {\n//   const [searchMovie, setSearchMovie] = useState('');\n//   const [movies, setMovies] = useState([]);\n\n//   const location = useLocation();\n//   const history = useNavigate();\n\n//   useEffect(() => {\n//     const searchString = new URLSearchParams(location.search).get('query');\n\n//     if (searchString) {\n//       const getMovies = async () => {\n//         const { results } = await searchMovies(searchString);\n\n//         setMovies(results);\n//         setSearchMovie(searchString);\n//       };\n\n//       getMovies();\n//     }\n//   }, [location.search]);\n\n//   const handleSubmit = async e => {\n//     e.preventDefault();\n\n//     if (searchMovie.trim()) {\n//       const { results } = await searchMovies(searchMovie);\n\n//       setMovies(results);\n//       setSearchMovie('');\n\n//       if (results.length === 0) {\n//         window.alert('We do not have such movie');\n//       }\n\n//       history({\n//         ...location,\n//         search: `query=${searchMovie}`,\n//       });\n//     }\n//   };\n\n//   return (\n//     <>\n//       <header>\n//         <form className={css.searchForm} onSubmit={handleSubmit}>\n//           <input\n//             onChange={e => setSearchMovie(e.target.value)}\n//             type=\"text\"\n//             autoComplete=\"off\"\n//             autoFocus\n//             placeholder=\"Search movie\"\n//             value={searchMovie}\n//             className={css.searchInput}\n//           />\n//           <button className={css.searchButton} type=\"submit\">\n//             &#128269;\n//           </button>\n//         </form>\n//       </header>\n//       <ul className={css.moviesList}>\n//         {movies.length > 0 &&\n//           movies.map(({ id, title, poster_path }) => (\n//             <MovieItem\n//               key={id}\n//               id={id}\n//               title={title}\n//               posterPath={poster_path ? `https://image.tmdb.org/t/p/w500${poster_path}` : noImg}\n\n//               // posterPath={poster_path || noImg} // Use noImg as fallback if poster_path is not available\n//               location={location}\n//             />\n//           ))}\n//       </ul>\n//     </>\n//   );\n// };\n\n// export default Movies;\n\n// import { useState, useEffect } from 'react';\n// import { Link, useLocation, useNavigate } from 'react-router-dom';\n// import { searchMovies } from '../../Fetch.jsx';\n// import noImg from '..//..//images/No_image.jpg';\n// import css from './Movies.module.css';\n\n// export default function Movies() {\n// const [searchMovie, setSearchMovie] = useState('');\n// const [movies, setMovies] = useState([]);\n\n// const location = useLocation();\n// const history = useNavigate();\n\n// useEffect(() => {\n//     const searchString = new URLSearchParams(location.search).get('query');\n\n//     if (searchString) {\n//         const getMovies = async () => {\n//             const { results } = await searchMovies(searchString);\n\n//             setMovies(results);\n//             setSearchMovie(searchString);\n\n//         };\n\n//         getMovies();\n//     }\n// }, [location.search]);\n\n// const handleSubmit = async e => {\n//     e.preventDefault();\n\n//     if (searchMovie.trim()) {\n//         const { results } = await searchMovies(searchMovie);\n\n//         setMovies(results);\n//         setSearchMovie('');\n\n//         if (results.length === 0) {\n//             window.alert ('We have not such films');\n//         }\n\n//         history({\n//             ...location,\n//             search: `query=${searchMovie}`,\n//         });\n//     }\n// };\n\n// return (\n//   <>\n//     <header>\n//       <form className={css.searchForm} onSubmit={handleSubmit}>\n//         <input\n//           onChange={e => setSearchMovie(e.target.value)}\n//           type=\"text\"\n//           autoComplete=\"off\"\n//           autoFocus\n//           placeholder=\"Search movie\"\n//           value={searchMovie}\n//           className={css.searchInput}\n//         />\n//         <button className={css.searchButton} type=\"submit\">\n//           &#128269;\n//         </button>\n//       </form>\n//     </header>\n//     <ul className={css.moviesList}>\n//       {movies.length > 0 &&\n//         movies.map(({ id, title, poster_path }) => (\n//           <li className={css.list} key={id} id={id}>\n//             <Link className={css.link}\n//               to={{\n//                 pathname: `/movies/${`${id}`}`,\n//                 state: {\n//                   from: {\n//                     location,\n//                   },\n//                 },\n//               }}\n//             >\n//               <img\n//                 className={css.img}\n//                 src={\n//                   poster_path\n//                     ? `https://image.tmdb.org/t/p/w500${poster_path}`\n//                     : noImg\n//                 }\n//                 alt=\"poster\"\n//                 width=\"\"\n//                 height=\"\"\n//               />\n//               <p className={css.movieName}>{title}</p>\n//             </Link>\n//           </li>\n//         ))}\n//     </ul>\n//   </>\n// );\n// };\n\n// export default function Movies() {\n//   return (\n//     <>\n//       <h2 className={css.moviesTitle}>Movies</h2>;\n//     </>\n//   );\n// }\n"],"names":["axios","KEY","getTrendingMovies","query","movies","data","searchMovies","searchParam","getMovieDetails","movieId","movie","getMovieCast","getReviews","id","title","poster_path","location","className","css","to","pathname","state","from","src","noImg","alt","width","height","useState","searchMovie","setSearchMovie","setMovies","useSearchParams","searchParams","history","useNavigate","useEffect","searchString","get","getMovies","results","handleSubmit","e","preventDefault","trim","length","window","alert","search","onSubmit","onChange","target","value","type","autoComplete","autoFocus","placeholder","map","MovieItem","posterPath"],"sourceRoot":""}